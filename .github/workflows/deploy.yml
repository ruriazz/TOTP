name: Deploy to Cloudflare Pages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - staging

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run check

      - name: Build project
        run: npm run build

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'demo',
              description: `Deploy release ${context.ref.replace('refs/tags/', '')}`,
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to Cloudflare Pages (Demo)
        run: |
          echo "Deploying release ${{ github.ref_name }} to demo environment..."
          wrangler pages deploy dist \
            --project-name=totp \
            --branch=master \
            --commit-message="Release ${{ github.ref_name }}" \
            --commit-hash="${{ github.sha }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://totp.dev.ruriazz.com',
              description: 'Deployment completed successfully'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: totp" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Demo" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://totp.dev.ruriazz.com" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Deployments**: [View deployments](https://github.com/${{ github.repository }}/deployments)" >> $GITHUB_STEP_SUMMARY
